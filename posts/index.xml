<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kip Jiang</title>
    <link>https://kipjiang.github.io/posts/</link>
    <description>Recent content in Posts on Kip Jiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>[Kip Jiang](/) &amp;#183; Theme [Simpleness](https://github.com/RainerChiang/simpleness) Powered by [Hugo](https://gohugo.io/)</copyright>
    <lastBuildDate>Wed, 06 Jan 2021 20:31:15 +0800</lastBuildDate><atom:link href="https://kipjiang.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configure Bridge Net for CentOS7</title>
      <link>https://kipjiang.github.io/posts/2021/01/06/configure-bridge-net-for-centos7/</link>
      <pubDate>Wed, 06 Jan 2021 20:31:15 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2021/01/06/configure-bridge-net-for-centos7/</guid>
      <description>我有一台安装了 CentOS7 的主机，但它只有一个网卡。现在想为这台主机上的虚拟机配置独立的 IP，从而其他主机可以直接连接到虚拟机。
可以为使用 brctl 命令为主机配置一个网桥，然后将网卡设置为混杂工作模式即可实现上述功能。
也可以直接编辑生成网桥的配置文件，下面是生成网桥 br0 的配置文件示例。
首先，通过 ifconfig 命令查看主机的网口名字，我的是 p4p1，一般通用的是 ens32 或者 eth0等。
1 2 3  $ ifconfig p4p1: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500 &amp;lt;snip&amp;gt;   接着，进入目录 /etc/sysconfig/network-scripts，生成 br0 的配置文件。
1 2 3 4 5 6 7 8 9 10 11 12  $ sudo vim ifcfg-br0 TYPE=Bridge BOOTPROTO=static IPADDR=aaa.bbb.ccc.242 GATEWAY=aaa.bbb.ccc.254 DNS1=xxx.yyy.zzz.36 DNS2=xxx.yyy.zzz.39 ONBOOT=yes PREFIX=25 DEFROUTE=yes NAME=br0 DEVICE=br0   然后，编辑网口配置文件，绑定网桥。只需在最后添加网桥名即可。
1 2 3  $ sudo vim ifcfg-p4p1 &amp;lt;snip&amp;gt; BRIDGE=br0   最后，重启网络服务：</description>
    </item>
    
    <item>
      <title>Privileged Docker Container</title>
      <link>https://kipjiang.github.io/posts/2021/01/05/privileged-docker-container/</link>
      <pubDate>Tue, 05 Jan 2021 21:21:15 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2021/01/05/privileged-docker-container/</guid>
      <description>之前测试一个针对 Docker 容器的项目 —— confine，它可以针对特定业务容器，生成对应的 seccomp 配置文件，限制容器所能使用的系统调用，从而增强容器的安全属性。
但是目标主机环境受限，需要在容器中部署此项目，然后再对宿主机上的其它容器开展检测。
可以通过运行特权容器的方式，实现在一个容器隔离环境中对宿主机上其它容器的探测，下面是运行特权容器的命令行：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $ docker run -it --name test-confine --privileged \ -v /var/run/docker.sock:/var/run/docker.sock \ -v /var/run:/var/run:ro \ -v /var/lib/docker:/var/lib/docker:ro \ -v /dev:/dev \ -v /boot:/boot:ro \ -v /lib/modules:/lib/modules:ro \ -v /usr/bin/docker:/usr/bin/docker:ro \ -v /etc:/ect:ro \ --net=host \ --pid=host \ --cap-add=NET_ADMIN \ --cap-add=SYS_ADMIN \ --cap-add=SYS_PTRACE \ --cap-add=AUDIT_CONTROL \ confine-env:1.</description>
    </item>
    
    <item>
      <title>Install Qv2ray in Ubunut</title>
      <link>https://kipjiang.github.io/posts/2020/07/11/qv2ray-in-ubuntu/</link>
      <pubDate>Sat, 11 Jul 2020 22:20:12 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2020/07/11/qv2ray-in-ubuntu/</guid>
      <description>SSR 之前用的 VPS 到期，而重新搭建服务太麻烦，就直接购买别人已经搭建好的 SSR 服务。
但是，服务商提供的小飞机 ShadowsocksR 不好用，我将它换成了 Qv2ray。
已经使用几周，体验还不错。
Qv2ray Qv2ray 运行在 v2ray 内核基础上，通过插件的形式提供对 SSR 的支持。
Download Softwares 需要下载三样东西：
  Qv2ray 客户端，我为 Ubuntu 下载的是 Qv2ray.v2.6.0.linux-x64.AppImage。AppImage 格式的文件，只需为其添加运行权限即可，免去安装各种依赖的痛苦。
  v2ray-core 内核，我这里下载 v2ray-linux-64 v4.26.0.
  QvPlugin-SSR 插件，下载 QvSSRPlugin.v2.0.0.linux-x64.so 正式版，其刚好适配 Qv2ray v2.6.0 正式版。
  Configure Qv2ray  可执行权限  将 Qv2ray.v2.6.0.linux-x64.AppImage 放置在 ~/.config/qv2ray/ 路径下，并赋予其可执行权限：
1  $ chmod +x Qv2ray.v2.6.0.linux-x64.AppImage    Add to Launcher  编辑应用配置文件：/usr/share/applications/qv2ray.desktop：</description>
    </item>
    
    <item>
      <title>Install Ubuntu as A Second OS</title>
      <link>https://kipjiang.github.io/posts/2020/07/11/dual-os/</link>
      <pubDate>Sat, 11 Jul 2020 20:19:58 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2020/07/11/dual-os/</guid>
      <description>A New Computer I got a new Dell computer several weeks ago, which installed the Windows 10. The computer has 2 disks, a 120Gb SSD and a 1T HDD.
I reserved 430G of HDD space and installed a ubuntu 20.04 as my second os, but I met some troubles because of the new UEFI system.
Deal with It New Tool At the beginning, I used an old version of UltraISO to make the USB boot system, but the UEFI system even can not recognize it.</description>
    </item>
    
    <item>
      <title>Change to New Theme</title>
      <link>https://kipjiang.github.io/posts/2020/06/16/change-to-new-theme/</link>
      <pubDate>Tue, 16 Jun 2020 22:01:13 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2020/06/16/change-to-new-theme/</guid>
      <description>This post is abandoned.
 Hugo Theme Diary I change my blog to a new hugo theme hugo-theme-diary which is pretty concise.
To meet my taste I am adding some new features to it.
You can switch to the new branch kipjiang to check the changes.
TODO List  Markdownify the copyright string. Display the theme info implicitly. Add some common Font Awesome icons to sidebar. Enable the visitor counter leancloud-visitor of valine and move the enablevaline to params.</description>
    </item>
    
    <item>
      <title>Jupyter Notebook on Remote Server</title>
      <link>https://kipjiang.github.io/posts/2020/03/31/remote-jupyter-notebook/</link>
      <pubDate>Tue, 31 Mar 2020 21:29:36 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2020/03/31/remote-jupyter-notebook/</guid>
      <description>Install miniconda 参考 Working With Ubuntu (2)
Configure Jypyter  Note: 通过 ssh 远程链接到服务器操作。
  安装 jupyter notebook  1  $ conda install jupyter notebook    生成配置文件  1 2  $ jupyter notebook --generate-config Writing default config to: /home/kip/.jupyter/jupyter_notebook_config.py    通过 ipython 生成密码的 Hash  1 2 3 4 5 6 7 8 9 10 11 12 13  $ ipython Python 3.6.9 |Anaconda, Inc.</description>
    </item>
    
    <item>
      <title>Working with Ubuntu (3)</title>
      <link>https://kipjiang.github.io/posts/2020/03/27/working-with-ubuntu-3rd/</link>
      <pubDate>Fri, 27 Mar 2020 19:33:47 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2020/03/27/working-with-ubuntu-3rd/</guid>
      <description>这个系列描述如何在 Ubuntu 中安装一些常用软件。
 Browser Firefox Ubuntu 自带的 Firefox 的账号服务属于国际区，如果你之前是通过 Windows 安装的中文版 Firefox 并注册的账号，在从 Ubuntu 中登录会提示你账号不存在。
你可以注册使用国际区的账号；也可以通过使用中文版的 Firefox 可执行文件替换 Ubuntu 默认的版本，从而达到登录中国区账号的目的。
下面讲讲如何替换为中国区 Firefox。
 下载中国区 localized Firefox  点击 https://www.firefox.com.cn/download/，选择 「下载其他语言版本」 下载。
替换可执行文件  将 /usr/lib 下的默认版本的 Firefox 备份
1  # mv /usr/lib/firefox /usr/lib/firefox_bak   将下载的 localized 版解压，替换默认版本
1 2  # tar -jxvf firefox-latest-x86_64.tar.bz2 # mv firefox/ /usr/lib/   添加启动图标  但是，经上述操作后我们并不能从 「Favorites」中的图标启动 Firefox，需要将默认版本中的启动脚本拷贝过来
1  # cp /usr/lib/firefox_bak/firefox.</description>
    </item>
    
    <item>
      <title>Virtual Machine with vTPM in Ubuntu</title>
      <link>https://kipjiang.github.io/posts/2020/03/11/vms-with-vtpm-in-ubuntu/</link>
      <pubDate>Wed, 11 Mar 2020 20:34:44 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2020/03/11/vms-with-vtpm-in-ubuntu/</guid>
      <description>Preparation   Reference Paper
Scalable attestation: A step toward secure and trusted clouds. In 2015 IEEE International Conference on Cloud Engineering _ Berger, etc., 2015, March. PDF
  Environment
 Host: Ubuntu 18.04 Guest: Ubuntu 14.04    Source Code
 seabios-tpm libtpms swtpm qemu-tpm    Tree of Path
1 2 3 4 5 6 7  kip └── workspace ├── libtpms ├── qemu-tpm ├── seabios ├── swtpm └── test     SeaBIOS SeaBIOS 包含 vTPM 支持的分支 seabios-tpm 最开始由 Stefan 维护，现在已经成功将其合并到主分支 SeaBIOS。因此，下面的实验中我们使用其主分支。</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>https://kipjiang.github.io/posts/2020/03/07/hello-hugo/</link>
      <pubDate>Sat, 07 Mar 2020 21:49:29 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2020/03/07/hello-hugo/</guid>
      <description>Hugo OneSentence  It is out of time.
 以前折腾过其他静态主页的生成器，像 hexo 和 Jekyll 等，都用来建过站点，但是从来没有正经写过文章。
这段时间，使用 Hugo，参考 YihuiXie 和 山羊博客，通过移植 hugo-ivy，也写了一个 hugo 的主题 hugo-theme-OneSentence。
感觉到现在为止，已经基本满足我的需求了。
Themes I have used 之前试过一些 hexo 和 Jekyll 的主题，就不再赘述了，这里仅展示一些符合我 taste 的 hugo 的主题，以作为我曾经浪费的时间的见证。
 hugo-theme-classic  原始版本是 googroot 修改自 YihuiXie 的主题，我又做了一些小小的改动，当时看中的就是它非常简单直白。
可以查看我重新生成的展示页面：classic-demo
  hugo-theme-jane
jane-demo
  主题 Jane 是 贤民 制作的主题，它对各种 shortcode 的支持都比较完善。
虽然，我已经不再使用这个主题了，但是我还是会常常去看下贤民的个人网站 贤民的比特记忆。
贤民说他是丽江白沙一个国际青年旅舍的掌柜，但和我印象中的掌柜却不太一样。他经常码代码、学英语、读书爬上，开心的和来自五湖四海的游客交流。
也许，哪天闲下来了或者逃离这种困境了，我会专程去丽江看看他。
  hugo-theme-even
even-demo
  这个不是 olOwOlo 原本的那个 even 主题了，是我在看到 @nusr(Steve Xu) 的个人站 Brave New World 后，又从他改动的版本再作修改得到的，当然现在也没有再用了。</description>
    </item>
    
    <item>
      <title>Working with Ubuntu (2)</title>
      <link>https://kipjiang.github.io/posts/2020/02/20/working-with-ubuntu-2nd/</link>
      <pubDate>Thu, 20 Feb 2020 12:23:43 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2020/02/20/working-with-ubuntu-2nd/</guid>
      <description>这个系列描述如何在 Ubuntu 中安装一些常用软件。
 VScode VSCode 的安装非常简单
1 2  $ sudo snap install --classic code code a622c65b from Visual Studio Code (vscode✓) installed   打开
1  $ code   Sublime Text 3  Reference：Linux Package Manager Repositories  Install the GPG key:
1  wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -   Ensure apt is set up to work with https sources:</description>
    </item>
    
    <item>
      <title>Working with Ubuntu (1)</title>
      <link>https://kipjiang.github.io/posts/2020/02/15/working-with-ubuntu-1st/</link>
      <pubDate>Sat, 15 Feb 2020 09:49:43 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2020/02/15/working-with-ubuntu-1st/</guid>
      <description>这个系列描述如何在 Ubuntu 中安装一些常用软件。
 安装 v2ray 下载并安装 v2ray 脚本：
v2ray-core/release
下载最新版的 v2ray Linux 压缩包，并通过脚本在本地安装：
1 2 3 4  $ curl https://github.com/v2ray/v2ray-core/releases/download/v4.22.1/v2ray-linux-64.zip $ curl -L -s https://install.direct/go.sh -o go.sh $ sudo su # bash go.sh --local ./v2ray-linux-64.zip   配置 Server，首先，你得有一台在境外的 VPS &amp;hellip;&amp;hellip; 233333 😂
配置 Client，编辑配置文件：
1  # vim /etc/v2ray/config.json   按如下示例配置：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  { &amp;#34;inbounds&amp;#34;: [{ &amp;#34;port&amp;#34;: 1080, &amp;#34;listen&amp;#34;: &amp;#34;127.</description>
    </item>
    
    <item>
      <title>Visual Studio Code: Remote-SSH</title>
      <link>https://kipjiang.github.io/posts/2019/11/07/vscode-remote-ssh/</link>
      <pubDate>Thu, 07 Nov 2019 12:25:16 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2019/11/07/vscode-remote-ssh/</guid>
      <description>第一步，当然是先在 VSCode 中安装 Remote-SSH 扩展啦。
通过 WSL 生成公私钥对：
1  $ ssh-keygen -t rsa -b 4096   通过 ssh 登录服务器，将生成的公钥文件的副本 id_rsa.tmp.pub 复制到路径 ~/.ssh/ 下，执行命令：
1 2  $ cat id_rsa.tmp.pub &amp;gt;&amp;gt; authorized_keys $ chmod 600 authorized_keys    Note: 必须执行 chmod 600 authorized_keys 命令
 配置本地的 VSCode，编辑文件 C:\Users\&amp;lt;UserName&amp;gt;\.ssh\config，按如下格式配置：
1 2 3 4 5  Host arbitrary-name-you-like HostName remote-host-ip Port remote-port User user-name-to-sign-in IdentityFile C:\Users\&amp;lt;UserName&amp;gt;\.ssh\id_rsa   </description>
    </item>
    
    <item>
      <title>Display Git Branch Name in Bash</title>
      <link>https://kipjiang.github.io/posts/2019/05/23/display-git-branch-name-in-bash/</link>
      <pubDate>Thu, 23 May 2019 15:38:03 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2019/05/23/display-git-branch-name-in-bash/</guid>
      <description>First 将脚本下载到 Home 目录
1 2  $ git clone https://github.com/KipJiang/git-aware-prompt.git ~/git-aware-prompt $ mv ~/git-aware-prompt ~/.git-aware-prompt   修改配置文件 .bashrc
1  $ vim ~/.bashrc   添加如下内容
1 2 3 4  # source .git-aware-prompt export PS1=&amp;#34;\${debian_chroot:+(\$debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] \[$txtcyn\]\$git_branch\[$txtred\]\$git_dirty\[$txtrst\]\$ &amp;#34; export GITAWAREPROMPT=~/.git-aware-prompt source &amp;#34;${GITAWAREPROMPT}/main.sh&amp;#34;   使配置生效
1  $ source ~/.bashrc   效果
 Ubuntu   CentOS  Second 编辑 ~/.bashrc，添加如下内容
1 2 3 4 5 6 7 8 9 10 11 12  # git branch function function git_branch { branch=&amp;#34;`git branch 2&amp;gt;/dev/null | grep &amp;#34;^\*&amp;#34; | sed -e &amp;#34;s/^\*\ //&amp;#34;`&amp;#34; if [ &amp;#34;${branch}&amp;#34; !</description>
    </item>
    
  </channel>
</rss>
