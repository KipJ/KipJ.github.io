<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Kip Jiang</title>
    <link>https://kipjiang.github.io/categories/docker/</link>
    <description>Recent content in Docker on Kip Jiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>[Kip Jiang](/) &amp;#183; Theme [Simpleness](https://github.com/RainerChiang/simpleness) Powered by [Hugo](https://gohugo.io/)</copyright>
    <lastBuildDate>Tue, 05 Jan 2021 21:21:15 +0800</lastBuildDate><atom:link href="https://kipjiang.github.io/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Privileged Docker Container</title>
      <link>https://kipjiang.github.io/posts/2021/01/05/privileged-docker-container/</link>
      <pubDate>Tue, 05 Jan 2021 21:21:15 +0800</pubDate>
      
      <guid>https://kipjiang.github.io/posts/2021/01/05/privileged-docker-container/</guid>
      <description>之前测试一个针对 Docker 容器的项目 —— confine，它可以针对特定业务容器，生成对应的 seccomp 配置文件，限制容器所能使用的系统调用，从而增强容器的安全属性。
但是目标主机环境受限，需要在容器中部署此项目，然后再对宿主机上的其它容器开展检测。
可以通过运行特权容器的方式，实现在一个容器隔离环境中对宿主机上其它容器的探测，下面是运行特权容器的命令行：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $ docker run -it --name test-confine --privileged \ -v /var/run/docker.sock:/var/run/docker.sock \ -v /var/run:/var/run:ro \ -v /var/lib/docker:/var/lib/docker:ro \ -v /dev:/dev \ -v /boot:/boot:ro \ -v /lib/modules:/lib/modules:ro \ -v /usr/bin/docker:/usr/bin/docker:ro \ -v /etc:/ect:ro \ --net=host \ --pid=host \ --cap-add=NET_ADMIN \ --cap-add=SYS_ADMIN \ --cap-add=SYS_PTRACE \ --cap-add=AUDIT_CONTROL \ confine-env:1.</description>
    </item>
    
  </channel>
</rss>
